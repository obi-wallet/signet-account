{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "gatekeeper_info"
      ],
      "properties": {
        "gatekeeper_info": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns true if address 1) is admin, 2) is permissioned address and msg is spendable by permissioned address, or 3) is one of approved cw20s (no funds attached tho). Notice that the spendlimit gatekeeper isn't aware of its account address at this time, so this query must specify it.",
      "type": "object",
      "required": [
        "can_spend"
      ],
      "properties": {
        "can_spend": {
          "type": "object",
          "required": [
            "funds",
            "rule",
            "sender",
            "user_entry",
            "user_entry_code_hash"
          ],
          "properties": {
            "funds": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin256"
              }
            },
            "rule": {
              "$ref": "#/definitions/Rule"
            },
            "sender": {
              "type": "string"
            },
            "user_entry": {
              "type": "string"
            },
            "user_entry_code_hash": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Authorization": {
      "type": "object",
      "properties": {
        "actor": {
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        },
        "contract": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "fields": {
          "description": "parameters for the above action FieldComp is assumed to be Equals if none",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/KeyValueOptions"
              },
              {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FieldComp"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        },
        "identifier": {
          "description": "Identifier is a non-zero number that represents the ID of the auth",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "message_name": {
          "description": "Message_name is the name of the message that we wish to match authorizations to MsgExecuteContract, MsgInstantiateContract",
          "type": [
            "string",
            "null"
          ]
        },
        "wasmaction_name": {
          "description": "wasmaction_name is the name of the action, e.g. \"transfer\" or \"unstake\"",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Coin256": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint256"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "CoinBalance": {
      "description": "The `CoinBalance` type is a practically extended `Coin` type. Originally intended to including a `limit_remaining` for spend limit cases, but it can now also carry an account balance for beneficiary cases. These two cases may be bifurcated into two Options in the future, but `current_balance` is sufficient for both.",
      "type": "object",
      "required": [
        "amount",
        "current_balance",
        "denom",
        "limit_remaining"
      ],
      "properties": {
        "amount": {
          "description": "The amount. `to_coin()` will convert this to a `Uint128` as expected for `Coin`",
          "allOf": [
            {
              "$ref": "#/definitions/Uint256"
            }
          ]
        },
        "current_balance": {
          "description": "The current balance. Only really useful for beneficiaries: spend limits convert everything to USD anyway.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint256"
            }
          ]
        },
        "denom": {
          "description": "The denomination. This is be a native asset string as in 'ujuno', a cw20 contract address, or an 'ibc/...' address",
          "type": "string"
        },
        "limit_remaining": {
          "description": "For regular spend limits, this is spend limit remaining, as tokens. For beneficiaries, this is percentage remaining (since limit calculation is a % of this rather than a ceiling)",
          "allOf": [
            {
              "$ref": "#/definitions/Uint256"
            }
          ]
        }
      }
    },
    "FieldComp": {
      "type": "string",
      "enum": [
        "equals",
        "not_equals",
        "greater_than",
        "less_than",
        "greater_than_or_equal",
        "less_than_or_equal",
        "any_of",
        "any_matching_object"
      ]
    },
    "KeyValueOptions": {
      "type": "object",
      "required": [
        "allowed_values",
        "key"
      ],
      "properties": {
        "allowed_values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StringOrBinary"
          }
        },
        "key": {
          "type": "string"
        }
      }
    },
    "PeriodType": {
      "description": "The `PeriodType` type is used for recurring components, including spend limits. Multiples of `Days` and `Months` allow for weekly and yearly recurrence.",
      "type": "string",
      "enum": [
        "days",
        "months"
      ]
    },
    "PermissionedAddressParams": {
      "description": "`PermissionedAddressParams` describe the permissions held by a `PermissionedAddress` and can be interpreted as spendlimit (if stored in `params`) or as beneficiary (if stored in `beneficiary_params`).",
      "type": "object",
      "required": [
        "address",
        "cooldown",
        "inheritance_records",
        "offset",
        "period_multiple",
        "period_type",
        "spend_limits"
      ],
      "properties": {
        "address": {
          "description": "Having `address` here is just for convenience, so it can be passed in as part of the struct. Address storing and checking is actually up a level, in the `PermissionedAddress` struct.",
          "type": "string"
        },
        "cooldown": {
          "description": "`cooldown` holds the current reset time for spend limits if a `PermissionedAddres`. It holds the main account dormancy threshold if `Beneficiary`.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "default": {
          "description": "`default` is not really used currently.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "denom": {
          "description": "previously was assumed USDC, but we can name a different asset (Otherwise axlUSDC is assumed)",
          "type": [
            "string",
            "null"
          ]
        },
        "inheritance_records": {
          "description": "`inheritance_records` store withdrawals of assets for the current period. Note that the coin.amount here is a percentage withdrawn.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin256"
          }
        },
        "offset": {
          "description": "offset of reset time in seconds: 0 means that limits are resetting at 00:00 UTC, and if monthly, on the 1st. 0 is assumed.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "period_multiple": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "period_type": {
          "$ref": "#/definitions/PeriodType"
        },
        "spend_limits": {
          "description": "Only one spend limit is expected. However, if Beneficiary, this is taken as a percentage for ANY asset balance, and asset is ignored. This will be generalized later, but remains this way now to ease contract migration.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CoinBalance"
          }
        }
      }
    },
    "Rule": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "sessionkey"
          ],
          "properties": {
            "sessionkey": {
              "$ref": "#/definitions/Sessionkey"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "spendlimit"
          ],
          "properties": {
            "spendlimit": {
              "$ref": "#/definitions/PermissionedAddressParams"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "inheritance"
          ],
          "properties": {
            "inheritance": {
              "$ref": "#/definitions/PermissionedAddressParams"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "allow"
          ],
          "properties": {
            "allow": {
              "$ref": "#/definitions/Authorization"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "block"
          ],
          "properties": {
            "block": {
              "$ref": "#/definitions/Authorization"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "custom"
          ],
          "properties": {
            "custom": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/Binary"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Sessionkey": {
      "description": "`Sessionkey` acts as an API key so that contract users can allow third parties authorization to conduct authorized transactions.",
      "type": "object",
      "required": [
        "admin_permissions",
        "expiration"
      ],
      "properties": {
        "admin_permissions": {
          "description": "Does this Session Key have elevated permissions.",
          "type": "boolean"
        },
        "expiration": {
          "description": "Unix timestamp indicating when this `Sessionkey` expires.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "use_current": {
          "description": "Indicates how many times the current `Sessionkey` has been used.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "use_limit": {
          "description": "Upperbound for the number of times this `Sessionkey` can be used.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "StringOrBinary": {
      "type": "object",
      "properties": {
        "binary": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        },
        "string": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "Uint256": {
      "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use secret_cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
      "type": "string"
    }
  }
}
