{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Pass through to user_state, after auth checking",
      "type": "object",
      "required": [
        "add_abstraction_rule"
      ],
      "properties": {
        "add_abstraction_rule": {
          "type": "object",
          "required": [
            "new_rule"
          ],
          "properties": {
            "new_rule": {
              "$ref": "#/definitions/AbstractionRule"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Called during factory setup to attach the instantiated debtkeeper to the user account; reply goes to factory, so it must be handled with an execute on the user-account contract",
      "type": "object",
      "required": [
        "attach_debtkeeper"
      ],
      "properties": {
        "attach_debtkeeper": {
          "type": "object",
          "required": [
            "debtkeeper_addr"
          ],
          "properties": {
            "debtkeeper_addr": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Called only during factory setup: if user state is already attached, attaching will fail",
      "type": "object",
      "required": [
        "attach_user_state"
      ],
      "properties": {
        "attach_user_state": {
          "type": "object",
          "properties": {
            "user_state_addr": {
              "type": [
                "string",
                "null"
              ]
            },
            "user_state_code_hash": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update the owner of the contract, possibly with a delay",
      "type": "object",
      "required": [
        "propose_update_owner"
      ],
      "properties": {
        "propose_update_owner": {
          "type": "object",
          "required": [
            "new_owner",
            "signers"
          ],
          "properties": {
            "new_owner": {
              "description": "The new owner",
              "type": "string"
            },
            "signatures": {
              "description": "nexthash signed by old signers",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "string"
              }
            },
            "signers": {
              "description": "The new multisig signers",
              "allOf": [
                {
                  "$ref": "#/definitions/Signers"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Confirm the update, from the new account",
      "type": "object",
      "required": [
        "confirm_update_owner"
      ],
      "properties": {
        "confirm_update_owner": {
          "type": "object",
          "properties": {
            "signatures": {
              "description": "nexthash signed by pending signers",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Cancel a pending owner update",
      "type": "object",
      "required": [
        "cancel_update_owner"
      ],
      "properties": {
        "cancel_update_owner": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Updates a pre-created owner account to user owner. Only one time, and only if magic_update is true.",
      "type": "object",
      "required": [
        "first_update_owner"
      ],
      "properties": {
        "first_update_owner": {
          "type": "object",
          "required": [
            "evm_contract_address",
            "evm_signing_address",
            "first_owner",
            "signers"
          ],
          "properties": {
            "evm_contract_address": {
              "type": "string"
            },
            "evm_signing_address": {
              "type": "string"
            },
            "first_owner": {
              "type": "string"
            },
            "signers": {
              "$ref": "#/definitions/Signers"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Change the delay for owner updates, cannot be done if update is pending",
      "type": "object",
      "required": [
        "change_owner_updates_delay"
      ],
      "properties": {
        "change_owner_updates_delay": {
          "type": "object",
          "required": [
            "new_delay"
          ],
          "properties": {
            "new_delay": {
              "description": "The new delay in seconds",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Execute a message, if it passes the checks",
      "type": "object",
      "required": [
        "execute"
      ],
      "properties": {
        "execute": {
          "type": "object",
          "required": [
            "msg",
            "sender"
          ],
          "properties": {
            "msg": {
              "description": "The message to execute. A serialized UniversalMsg",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            },
            "sender": {
              "description": "The sender address, since user_entry will usually be the sender. Since execution can't happen at this account (assets are in user_entry), fake execute calls directly to this contract may succeed but will only burn fees. (However, they may potentially reduce spendlimits under the current setup)",
              "type": "string"
            },
            "signatures": {
              "description": "Used for alternate verification (by signers)",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "rm_abstraction_rule"
      ],
      "properties": {
        "rm_abstraction_rule": {
          "type": "object",
          "required": [
            "rule_id",
            "ty"
          ],
          "properties": {
            "rule_id": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "ty": {
              "$ref": "#/definitions/GatekeeperType"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_user_state_account_address"
      ],
      "properties": {
        "update_user_state_account_address": {
          "type": "object",
          "required": [
            "new_user_account"
          ],
          "properties": {
            "new_user_account": {
              "type": "string"
            },
            "new_user_account_code_hash": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "upsert_abstraction_rule"
      ],
      "properties": {
        "upsert_abstraction_rule": {
          "type": "object",
          "required": [
            "id",
            "updated_rule"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "updated_rule": {
              "$ref": "#/definitions/AbstractionRule"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AbstractionRule": {
      "type": "object",
      "required": [
        "actor",
        "main_rule",
        "ty"
      ],
      "properties": {
        "actor": {
          "$ref": "#/definitions/Addr"
        },
        "id": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "main_rule": {
          "$ref": "#/definitions/Rule"
        },
        "ty": {
          "$ref": "#/definitions/GatekeeperType"
        }
      }
    },
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Authorization": {
      "type": "object",
      "required": [
        "expiration"
      ],
      "properties": {
        "actor": {
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        },
        "contract": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "expiration": {
          "description": "sessionkey functionality has been optimized to here; `actor` can be used along for a mostly unrestricted sessionkey",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "fields": {
          "description": "parameters for the above action FieldComp is assumed to be Equals if none",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/KeyValueOptions"
              },
              {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FieldComp"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        },
        "identifier": {
          "description": "Identifier is a non-zero number that represents the ID of the auth",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "message_name": {
          "description": "Message_name is the name of the message that we wish to match authorizations to MsgExecuteContract, MsgInstantiateContract",
          "type": [
            "string",
            "null"
          ]
        },
        "wasmaction_name": {
          "description": "wasmaction_name is the name of the action, e.g. \"transfer\" or \"unstake\"",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Coin256": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint256"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "CoinBalance": {
      "description": "The `CoinBalance` type is a practically extended `Coin` type. Originally intended to including a `limit_remaining` for spend limit cases, but it can now also carry an account balance for beneficiary cases. These two cases may be bifurcated later.",
      "type": "object",
      "required": [
        "amount",
        "denom",
        "limit_remaining"
      ],
      "properties": {
        "amount": {
          "description": "The amount. `to_coin()` will convert this to a `Uint128` as expected for `Coin`",
          "allOf": [
            {
              "$ref": "#/definitions/Uint256"
            }
          ]
        },
        "denom": {
          "description": "The denomination. This is be a native asset string as in 'ujuno', a cw20 contract address, or an 'ibc/...' address",
          "type": "string"
        },
        "limit_remaining": {
          "description": "For regular spend limits, this is spend limit remaining, as tokens. For beneficiaries, this is percentage remaining (since limit calculation is a % of this rather than a ceiling)",
          "allOf": [
            {
              "$ref": "#/definitions/Uint256"
            }
          ]
        },
        "spent_this_inheritance_period": {
          "description": "Spent so far from inheritance %.",
          "anyOf": [
            {
              "$ref": "#/definitions/Uint256"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "FieldComp": {
      "type": "string",
      "enum": [
        "equals",
        "not_equals",
        "greater_than",
        "less_than",
        "greater_than_or_equal",
        "less_than_or_equal",
        "any_of",
        "any_matching_object"
      ]
    },
    "GatekeeperType": {
      "type": "string",
      "enum": [
        "allowlist",
        "blocklist",
        "custom",
        "debt",
        "delay",
        "inheritance",
        "spendlimit"
      ]
    },
    "KeyValueOptions": {
      "type": "object",
      "required": [
        "allowed_values",
        "key"
      ],
      "properties": {
        "allowed_values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StringOrBinary"
          }
        },
        "key": {
          "type": "string"
        }
      }
    },
    "PeriodType": {
      "description": "The `PeriodType` type is used for recurring components, including spend limits. Multiples of `Days` and `Months` allow for weekly and yearly recurrence.",
      "type": "string",
      "enum": [
        "days",
        "months"
      ]
    },
    "PermissionedAddressParams": {
      "description": "`PermissionedAddressParams` describe the permissions held by a `PermissionedAddress` and can be interpreted as spendlimit (if stored in `params`) or as beneficiary (if stored in `beneficiary_params`).",
      "type": "object",
      "required": [
        "address",
        "cooldown",
        "expiration",
        "inheritance_records",
        "offset",
        "period_multiple",
        "period_type",
        "spend_limits"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "cooldown": {
          "description": "`cooldown` holds the current reset time for spend limits if a `PermissionedAddres`. It holds the main account dormancy threshold if `Beneficiary`.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "default": {
          "description": "`default` is not really used currently.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "denom": {
          "description": "previously was assumed USDC, but we can name a different asset (Otherwise axlUSDC is assumed)",
          "type": [
            "string",
            "null"
          ]
        },
        "expiration": {
          "description": "expiration for this rule; 0 is none",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "inheritance_records": {
          "description": "`inheritance_records` store withdrawals of assets for the current period. Note that the coin.amount here is a percentage withdrawn.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin256"
          }
        },
        "offset": {
          "description": "offset of reset time in seconds: 0 means that limits are resetting at 00:00 UTC, and if monthly, on the 1st. 0 is assumed.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "period_multiple": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "period_type": {
          "$ref": "#/definitions/PeriodType"
        },
        "spend_limits": {
          "description": "Only one spend limit is expected. However, if Beneficiary, this is taken as a percentage for ANY asset balance, and asset is ignored. This will be generalized later, but remains this way now to ease contract migration.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CoinBalance"
          }
        }
      }
    },
    "Rule": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "spendlimit"
          ],
          "properties": {
            "spendlimit": {
              "$ref": "#/definitions/PermissionedAddressParams"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "inheritance"
          ],
          "properties": {
            "inheritance": {
              "$ref": "#/definitions/PermissionedAddressParams"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "allow"
          ],
          "properties": {
            "allow": {
              "$ref": "#/definitions/Authorization"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "block"
          ],
          "properties": {
            "block": {
              "$ref": "#/definitions/Authorization"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "custom"
          ],
          "properties": {
            "custom": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/Binary"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Signer": {
      "description": "The `Signer` type identifies a member of the admin multisig, and its type. The format or encryption of type, `ty`, is up to the client. `address` is verified using the deps API when Signer is created.",
      "type": "object",
      "required": [
        "address",
        "pubkey_base_64",
        "ty"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Addr"
        },
        "pubkey_base_64": {
          "type": "string"
        },
        "ty": {
          "type": "string"
        }
      }
    },
    "Signers": {
      "type": "object",
      "required": [
        "signers"
      ],
      "properties": {
        "signers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signer"
          }
        }
      }
    },
    "StringOrBinary": {
      "type": "object",
      "properties": {
        "binary": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        },
        "string": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "Uint256": {
      "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use secret_cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
      "type": "string"
    }
  }
}
