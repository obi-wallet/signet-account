use cggmp_threshold_ecdsa::mpc_ecdsa::gg_2020::state_machine::{
    keygen, sign,
};
use thiserror::Error;

/// Errors generated by the protocol.
#[derive(Debug, Error)]
pub enum Error {
    /// Error generated when the user's public key is not in the
    /// list of session participants.
    #[error("public key {0} is not a session participant")]
    NotSessionParticipant(String),

    /// Error generated the local key used for signing does not
    /// exist in the list of participants.
    #[error("local key index not found in list of participants")]
    LocalKeyNotParticipant,

    /// Signature verification failed.
    #[error("failed to verify generated signature")]
    VerifySignature,

    /// Key generation error.
    #[error(transparent)]
    Keygen(#[from] keygen::Error),

    /// Signing error.
    #[error(transparent)]
    SignOffline(#[from] sign::Error),

    /// Signing error.
    #[error(transparent)]
    SignManual(#[from] sign::SignError),

    /// Error generated by the client library.
    #[error(transparent)]
    Client(#[from] mpc_client::Error),

    /// Driver library error.
    #[error(transparent)]
    Driver(#[from] Box<crate::Error>),
}

#[cfg(all(target_arch = "wasm32", target_os = "unknown"))]
impl From<Error> for wasm_bindgen::JsValue {
    fn from(value: Error) -> Self {
        let s = value.to_string();
        wasm_bindgen::JsValue::from_str(&s)
    }
}
